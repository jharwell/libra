name: Build and test

on:
  push:
    branches:
      - master
      - devel

concurrency:
  group: "build-and-test"
  cancel-in-progress: true

jobs:
  docs:
    uses: ./.github/workflows/pages.yml
    secrets: inherit

  create-conan-pkg:
    runs-on: ubuntu-latest
    container:
      image: jharwell/ubuntu22.04:2023-04-12
    steps:
      - uses: actions/checkout@v3
      - name: Create package
        shell: bash
        run: |
          conan create \
          --user jharwell \
          --lockfile-out=package.lock \
          .
      - name: Obtain package reference
        id: get-package-ref
        shell: bash
        run: |
          echo "PACKAGE_REF=`egrep -o mp-units[^%]+ package.lock`" >> ${GITHUB_OUTPUT}

      - name: Upload libra Conan package to Conan CI repository
        if: github.ref == 'refs/heads/master' || env.CHANNEL == 'stable'
        shell: bash
        run: |
          conan remote add conan-jharwell-ci https://mpusz.jfrog.io/artifactory/api/conan/conan-ci
          conan remote login conan-mpusz-ci ${{ secrets.CONAN_LOGIN_USERNAME }} -p ${{ secrets.CONAN_CI_PASSWORD }}
          conan upload ${{ steps.get-package-ref.outputs.package_ref }} -r conan-jharwell-ci --confirm

  tag-release:
    runs-on: ubuntu-latest
    container:
      image: jharwell/ubuntu22.04:2023-04-12
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: Push tag
        shell: bash
        run: |
          git config --global --add safe.directory $PWD
          git config --global user.email "${{ github.event.pusher.email }}"
          git config --global user.name "${{ github.event.pusher.name }}"

          git submodule update --init --remote --recursive

          PACKAGE_VERSION=$(sed -nE 's/.*LIBRA_VERSION ([0-9]+.[0-9]+.[0-9]+).*/\1/p' cmake/libra/project.cmake)

          if [ "${{ github.ref }}" = "refs/heads/devel" ]; then
            TAG_VERSION=${PACKAGE_VERSION}.beta
            TAG_MESSAGE="Development release ${TAG_VERSION}"
            git tag ${TAG_VERSION} -m "${TAG_MESSAGE}" -f
            git push -o ci.skip origin ${TAG_VERSION} -f
          else
            TAG_VERSION=${PACKAGE_VERSION}
            TAG_MESSAGE="Release ${TAG_VERSION}"
            git tag ${TAG_VERSION} -m "${TAG_MESSAGE}"
            git push -o ci.skip origin ${TAG_VERSION}
          fi
